//monotonic
template <typename T, bool isMin> struct ConvexHullTrick {
    using P = pair<T, T>;
    deque<P> H;
    bool empty() const { return H.empty(); }
    void clear() { H.clear(); }

    inline int sgn(T x) { return x == 0 ? 0 : (x < 0 ? -1 : 1); }

    using D = long double;
    inline bool check(const P &a, const P &b, const P &c) {
        if(b.second == a.second || c.second == b.second)
            return sgn(b.first - a.first) * sgn(c.second - b.second) >=
                   sgn(c.first - b.first) * sgn(b.second - a.second);

        // return (b.first-a.first)*(c.second-b.second) >=
        // (b.second-a.second)*(c.first-b.first);
        return D(b.first - a.first) * sgn(c.second - b.second) /
                   D(abs(b.second - a.second)) >=
               D(c.first - b.first) * sgn(b.second - a.second) /
                   D(abs(c.second - b.second));
    }

    void addLine(T m, T b) {
        if(!isMin) m *= -1, b *= -1;
        P line(m, b);
        if(empty()) {
            H.emplace_front(line);
            return;
        }
        if(H.front().first <= m) {
            if(H.front().first == m) {
                if(H.front().second <= b) return;
                H.pop_front();
            }
            while(H.size() >= 2 && check(line, H.front(), H[1])) H.pop_front();
            H.emplace_front(line);
        } else {
            assert(m <= H.back().first);
            if(H.back().first == m) {
                if(H.back().second <= b) return;
                H.pop_back();
            }
            while(H.size() >= 2 && check(H[H.size() - 2], H.back(), line))
                H.pop_back();
            H.emplace_back(line);
        }
    }

    inline T getY(const P &a, const T &x) { return a.first * x + a.second; }

    T query(T x) {
        assert(!empty());
        int l = -1, r = H.size() - 1;
        while(l + 1 < r) {
            int m = (l + r) >> 1;
            if(getY(H[m], x) >= getY(H[m + 1], x))
                l = m;
            else
                r = m;
        }
        if(isMin) return getY(H[r], x);
        return -getY(H[r], x);
    }

    T queryMonotoneInc(T x) {
        assert(!empty());
        while(H.size() >= 2 && getY(H.front(), x) >= getY(H[1], x))
            H.pop_front();
        if(isMin) return getY(H.front(), x);
        return -getY(H.front(), x);
    }

    T queryMonotoneDec(T x) {
        assert(!empty());
        while(H.size() >= 2 && getY(H.back(), x) >= getY(H[H.size() - 2], x))
            H.pop_back();
        if(isMin) return getY(H.back(), x);
        return -getY(H.back(), x);
    }
};

//nonmonotonic
template <typename T, bool isMin, typename number = double>
struct NonmonotonicConvexHullTrick {
    static constexpr number INF = numeric_limits<T>::max();
    struct Line {
        T m, b, val;
        number x;
        bool q;
        Line(T m = 0, T b = 0) : m(m), b(b), val(0), x(-INF), q(false) {}

        T eval(T x) const { return m * x + b; }
        bool parallel(const Line &l) const { return m == l.m; }
        number intersect(const Line &l) const {
            return parallel(l) ? number(INF)
                               : number(l.b - b) / number(m - l.m);
        }
        bool operator<(const Line &l) const {
            if(l.q) return x < l.val;
            return m < l.m;
        }
    };

    set<Line> hull;
    using iter = typename set<Line>::iterator;

    bool cPrev(iter it) { return it != hull.begin(); }
    bool cNext(iter it) { return it != hull.end() && next(it) != hull.end(); }

    bool bad(const Line &l1, const Line &l2, const Line &l3) {
        return l1.intersect(l3) <= l1.intersect(l2);
    }
    bool bad(iter it) {
        return cPrev(it) && cNext(it) && bad(*prev(it), *it, *next(it));
    }

    iter update(iter it) {
        if(!cPrev(it)) return it;
        number x = it->intersect(*prev(it));
        Line tmp(*it);
        tmp.x = x;
        it = hull.erase(it);
        return hull.insert(it, tmp);
    }

    void addLine(T m, T b) {
        if(isMin) m = -m, b = -b;
        Line l(m, b);
        iter it = hull.lower_bound(l);
        if(it != hull.end() && l.parallel(*it)) {
            if(it->b < b)
                it = hull.erase(it);
            else
                return;
        }
        it = hull.insert(it, l);
        if(bad(it)) {
            hull.erase(it);
            return;
        }
        while(cPrev(it) && bad(prev(it))) hull.erase(prev(it));
        while(cNext(it) && bad(next(it))) hull.erase(next(it));

        it = update(it);
        if(cPrev(it)) update(prev(it));
        if(cNext(it)) update(next(it));
    }

    bool empty() const { return hull.empty(); }

    T query(T x) {
        assert(!empty());
        Line q;
        q.val = x;
        q.q = 1;
        iter it = --hull.lower_bound(q);
        if(isMin) return -(it->eval(x));
        return it->eval(x);
    }
};
