
// 1000000007 で割ったあまりを扱う構造体
class mint {
  public:
    static long long MOD;
    long long val;
    mint(long long v = 0) noexcept : val(v % MOD) {
        if(val < 0) v += MOD;
    }
    int getmod() { return MOD; }
    mint operator-() const noexcept { return val ? MOD - val : 0; }
    mint operator+(const mint &r) const noexcept { return mint(*this) += r; }
    mint operator-(const mint &r) const noexcept { return mint(*this) -= r; }
    mint operator*(const mint &r) const noexcept { return mint(*this) *= r; }
    mint operator/(const mint &r) const noexcept { return mint(*this) /= r; }
    mint &operator+=(const mint &r) noexcept {
        val += r.val;
        val = (val + MOD) % MOD;
        return *this;
    }
    mint &operator-=(const mint &r) noexcept {
        val -= r.val;
        val = (val + MOD) % MOD;
        return *this;
    }
    mint &operator*=(const mint &r) noexcept {
        val = val * r.val % MOD;
        return *this;
    }
    mint &operator/=(const mint &r) noexcept {
        long long a = r.val, b = MOD, u = 1, v = 0;
        while(b) {
            long long t = a / b;
            a -= t * b;
            swap(a, b);
            u -= t * v;
            swap(u, v);
        }
        val = val * u % MOD;
        if(val < 0) val += MOD;
        return *this;
    }
    bool operator==(const mint &r) const noexcept { return this->val == r.val; }
    bool operator!=(const mint &r) const noexcept { return this->val != r.val; }
    friend ostream &operator<<(ostream &os, const mint &x) noexcept {
        return os << x.val;
    }
    friend istream &operator>>(istream &is, mint &x) noexcept {
        return is >> x.val;
    }
    friend mint modpow(const mint &a, long long n) noexcept {
        if(n == 0) return 1;
        mint t = modpow(a, n / 2);
        t = t * t;
        if(n & 1) t = t * a;
        return t;
    }
};
ll mint::MOD = 1e9 + 7;
ll const MAX_SIZE = 1e6 + 1;
mint inv[MAX_SIZE];
mint fact[MAX_SIZE];
mint factinv[MAX_SIZE];
void cominit() {
    inv[1] = 1;
    for(int i = 2; i < MAX_SIZE; i++) {
        inv[i] = (-inv[mint::MOD % i]) * (mint::MOD / i);
    }
    fact[0] = factinv[0] = 1;
    for(int i = 1; i < MAX_SIZE; i++) {
        fact[i] = mint(i) * fact[i - 1];
        factinv[i] = inv[i] * factinv[i - 1];
    }
}
mint comb(int n, int k) {
    if(n >= 0 && k >= 0 && n - k >= 0) {
        return fact[n] * factinv[k] * factinv[n - k];
    }
    return 0;
}
mint hcomb(ll n, ll k) {
    if(n == 0 && k == 0) return 1;
    return comb(n + k - 1, k);
}
ll gcd(ll x, ll y) { return y ? gcd(y, x % y) : x; }