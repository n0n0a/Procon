// 正方行列の積
vector<VL> matmul(vector<VL> a, vector<VL> b) {
    ll len = a[0].size();
    vector<VL> ret(len, VL(len, 0));
    REP(i, len) REP(j, len) REP(k, len) {
        ret[i][j] += a[i][k] * b[k][j];
        ret[i][j] %= MOD;
    }
    return ret;
}

vector<VL> matpow(vector<VL> m, ll n) {
    ll len = m[0].size();
    if(n == 0) {
        REP(i, len) REP(j, len) { m[i][j] = (i == j); }
        return m;
    }
    auto res = matpow(matmul(m, m), n / 2);
    if(n & 1) res = matmul(m, res);
    return res;
}

using vec = vector<mint>;
using mat = vector<vec>;

mat matmul(const mat &A, const mat &B) {
    mat ret(A.size(), vec(B[0].size()));
    REP(i, A.size()) REP(j, B[0].size()) REP(k, B.size()) {
        ret[i][j] += A[i][k] * B[k][j];
    }
    return ret;
}

mat matpow(mat A, ll n) {
    mat ret(A.size(), vec(A.size()));
    REP(i, A.size()) ret[i][i] = 1;
    while(n) {
        if(n & 1) ret = matmul(ret, A);
        A = matmul(A, A);
        n >>= 1;
    }
    return ret;
}

// kitamasa(c, u, v)
template <class T>
std::vector<T> kitamasa(const vector<T> &c, const vector<T> &u, const vector<T> &v) {
    size_t k = c.size();
    std::vector<T> r(2 * k - 1);
    for(int i = 0; i < k; i++)
        for(int j = 0; j < k; j++) r[i + j] += u[i] * v[j];
    for(int i = 2 * k - 2; i >= k; i--)
        for(int j = 0; j < k; j++) r[i - k + j] += r[i] * c[j];
    r.resize(k);
    return r;
}

//kitamasa struct
template <typename R> struct Kitamasa {
    using VR = vector<R>;
    VR c;
    vector<VR> rs;
    int m;

    Kitamasa(const VR &C) : c(C), rs(1), m(c.size()) {
        rs[0].assign(2 * m + 1, R::add_identity());
        rs[0][1] = R::mul_identity();
    }

    VR merge(const VR &x, const VR &y) {
        VR z(2 * m + 1, R::add_identity());
        for(int i = 1; i <= m; i++)
            for(int j = 1; j <= m; j++) z[i + j] = z[i + j] + (x[i] * y[j]);

        for(int i = 2 * m; i > m; z[i--] = R::add_identity())
            for(int j = 1; j <= m; j++) z[i - j] = z[i - j] + (c[m - j] * z[i]);
        return z;
    }

    R calc(const VR &A, long long n) {
        assert((int)A.size() == m);
        VR res(rs[0]);
        for(int i = 0; n; i++, n >>= 1) {
            if(i >= (int)rs.size())
                rs.emplace_back(merge(rs[i - 1], rs[i - 1]));
            if(~n & 1) continue;
            res = merge(res, rs[i]);
        }
        R ans = R::add_identity();
        for(int i = 1; i <= m; i++) ans = ans + (res[i] * A[i - 1]);
        return ans;
    }
};


//Gausian
using D = double;
const D EPS = 1e-10;

// matrix
template<class T> struct Matrix {
    vector<vector<T> > val;
    Matrix(int n, int m, T x = 0) : val(n, vector<T>(m, x)) {}
    void init(int n, int m, T x = 0) {val.assign(n, vector<T>(m, x));}
    size_t size() const {return val.size();}
    inline vector<T>& operator [] (int i) {return val[i];}
};

template<class T> int GaussJordan(Matrix<T> &A, bool is_extended = false) {
    int m = A.size(), n = A[0].size();
    int rank = 0;
    for (int col = 0; col < n; ++col) {
        // 拡大係数行列の場合は最後の列は掃き出ししない
        if (is_extended && col == n-1) break;

        // ピボットを探す
        int pivot = -1;
        T ma = EPS;
        for (int row = rank; row < m; ++row) {
            if (abs(A[row][col]) > ma) {
                ma = abs(A[row][col]);
                pivot = row;
            }
        }
        // ピボットがなかったら次の列へ
        if (pivot == -1) continue;

        // まずは行を swap
        swap(A[pivot], A[rank]);

        // ピボットの値を 1 にする
        auto fac = A[rank][col];
        for (int col2 = 0; col2 < n; ++col2) A[rank][col2] /= fac;

        // ピボットのある列の値がすべて 0 になるように掃き出す
        for (int row = 0; row < m; ++row) {
            if (row != rank && abs(A[row][col]) > EPS) {
                auto fac = A[row][col];
                for (int col2 = 0; col2 < n; ++col2) {
                    A[row][col2] -= A[rank][col2] * fac;
                }
            }
        }
        ++rank;
    }
    return rank;
}

template<class T> vector<T> linear_equation(Matrix<T> A, vector<T> b) {
    // extended
    int m = A.size(), n = A[0].size();
    Matrix<T> M(m, n + 1);
    for (int i = 0; i < m; ++i) {
        for (int j = 0; j < n; ++j) M[i][j] = A[i][j];
        M[i][n] = b[i];
    }
    int rank = GaussJordan(M, true);
    
    // check if it has no solution
    vector<T> res;
    for (int row = rank; row < m; ++row) if (abs(M[row][n]) > EPS) return res;

    // answer
    res.assign(n, 0);
    for (int i = 0; i < rank; ++i) res[i] = M[i][n];
    return res;
}


//MOD Gausian

// 逆元計算
long long modinv(long long a, long long mod) {
    long long b = mod, u = 1, v = 0;
    while (b) {
        long long t = a/b;
        a -= t*b; swap(a, b);
        u -= t*v; swap(u, v);
    }
    u %= mod;
    if (u < 0) u += mod;
    return u;
}

// matrix
template<int MOD> struct Matrix {
    vector<vector<long long> > val;
    Matrix(int n, int m, long long x = 0) : val(n, vector<long long>(m, x)) {}
    void init(int n, int m, long long x = 0) {val.assign(n, vector<long long>(m, x));}
    size_t size() const {return val.size();}
    inline vector<long long>& operator [] (int i) {return val[i];}
};

template<int MOD> int GaussJordan(Matrix<MOD> &A, bool is_extended = false) {
    int m = A.size(), n = A[0].size();
    for (int row = 0; row < m; ++row)
        for (int col = 0; col < n; ++col)
            A[row][col] = (A[row][col] % MOD + MOD) % MOD;
    
    int rank = 0;
    for (int col = 0; col < n; ++col) {
        if (is_extended && col == n-1) break;
        int pivot = -1;
        for (int row = rank; row < m; ++row) {
            if (A[row][col] != 0) {
                pivot = row;
                break;
            }
        }
        if (pivot == -1) continue;
        swap(A[pivot], A[rank]);
        auto inv = modinv(A[rank][col], MOD);
        for (int col2 = 0; col2 < n; ++col2)
            A[rank][col2] = A[rank][col2] * inv % MOD;
        for (int row = 0; row < m; ++row) {
            if (row != rank && A[row][col]) {
                auto fac = A[row][col];
                for (int col2 = 0; col2 < n; ++col2) {
                    A[row][col2] -= A[rank][col2] * fac % MOD;
                    if (A[row][col2] < 0) A[row][col2] += MOD;
                }
            }
        }
        ++rank;
    }
    return rank;
}

template<int MOD> int linear_equation(Matrix<MOD> A, vector<long long> b, vector<long long> &res) {
    int m = A.size(), n = A[0].size();
    Matrix<MOD> M(m, n + 1);
    for (int i = 0; i < m; ++i) {
        for (int j = 0; j < n; ++j) M[i][j] = A[i][j];
        M[i][n] = b[i];
    }
    int rank = GaussJordan(M, true);

    // check if it has no solution
    for (int row = rank; row < m; ++row) if (M[row][n]) return -1;

    // answer
    res.assign(n, 0);
    for (int i = 0; i < rank; ++i) res[i] = M[i][n];
    return rank;
}


//bit Gausian

const int MAX_ROW = 510; // to be set appropriately
const int MAX_COL = 510; // to be set appropriately
struct BitMatrix {
    int H, W;
    bitset<MAX_COL> val[MAX_ROW];
    BitMatrix(int m = 1, int n = 1) : H(m), W(n) {}
    inline bitset<MAX_COL>& operator [] (int i) {return val[i];}
};

int GaussJordan(BitMatrix &A, bool is_extended = false) {
    int rank = 0;
    for (int col = 0; col < A.W; ++col) {
        if (is_extended && col == A.W - 1) break;
        int pivot = -1;
        for (int row = rank; row < A.H; ++row) {
            if (A[row][col]) {
                pivot = row;
                break;
            }
        }
        if (pivot == -1) continue;
        swap(A[pivot], A[rank]);
        for (int row = 0; row < A.H; ++row) {
            if (row != rank && A[row][col]) A[row] ^= A[rank];
        }
        ++rank;
    }
    return rank;
}

int linear_equation(BitMatrix A, vector<int> b, vector<int> &res) {
    int m = A.H, n = A.W;
    BitMatrix M(m, n + 1);
    for (int i = 0; i < m; ++i) {
        for (int j = 0; j < n; ++j) M[i][j] = A[i][j];
        M[i][n] = b[i];
    }
    int rank = GaussJordan(M, true);

    // check if it has no solution
    for (int row = rank; row < m; ++row) if (M[row][n]) return -1;

    // answer
    res.assign(n, 0);
    for (int i = 0; i < rank; ++i) res[i] = M[i][n];
    return rank;
}