//Grundy
ll calcgrundy(ll x, ll y) {
    if(dp[x][y] != -1) return dp[x][y];
    bitset<250> bit;
    ll dx[] = {-2, -2, 1, -1};
    ll dy[] = {1, -1, -2, -2};
    REP(i, 4) {
        ll nx = x + dx[i], ny = y + dy[i];
        if(nx < 0 || nx > 14 || ny < 0 || ny > 14) continue;
        bit.set(calcgrundy(nx, ny));
    }
    ll val = 0;
    while(bit.test(val)) val++;
    return dp[x][y] = val;
}

//Backward
// グラフの頂点数、辺数、各ノードの重み
int N, M;
vector<int> X;

// ゲームグラフ (後退解析のために辺の向きを逆にする)
vector<vector<int> > G;
vector<int> deg; // ゲームグラフにおける出次数 (辺の向きを逆にした状態で入次数)

// 二分探索判定 (D 以上にできるかどうか)
bool judge(int D) {
    vector<int> cdeg = deg;
    queue<int> que; // キュー
    vector<int> dp(N * 2, -1); // 最初は全体を -1 で初期化

    // 初期条件
    for (int i = 0; i < N; ++i) {
        if (X[i] >= D) {
            dp[i] = 1; // 先手勝ち
            que.push(i);

            if (cdeg[i] == 0) {
                dp[i + N] = 0; // 後手負け
                que.push(i + N);
            }
        }
        else {
            dp[i + N] = 1; // 後手勝ち
            que.push(i + N);

            if (cdeg[i] == 0) {
                dp[i] = 0; // 先手負け
                que.push(i);
            }
        }
    }   

    // 後退解析 (ここは自動的に書ける)
    while (!que.empty()) {
        int v = que.front(); que.pop();
        for (auto nv : G[v]) {
             // すでに見た頂点はスルー
            if (dp[nv] != -1) continue;

            --cdeg[nv]; // 辺 (nv, v) を削除
            if (dp[v] == 0) {
                dp[nv] = 1;
                que.push(nv);
            }
            else if (dp[v] == 1) {
                if (cdeg[nv] == 0) {
                    dp[nv] = 0;
                    que.push(nv);
                }
            }
        }
    }

    // ノード 0 が先手番で勝ちかどうか
    return (dp[0] == 1);
}

int main() {
    // 入力
    cin >> N >> M;
    X.resize(N*2);
    for (int i = 0; i < N; ++i) cin >> X[i];
    for (int i = 0; i < N; ++i) X[i+N] = X[i];
    G.assign(N*2, vector<int>());
    deg.assign(N*2, 0);
    for (int i = 0; i < M; ++i) {
        int a, b; cin >> a >> b; --a, --b;
        G[b + N].push_back(a); // 後手番での後退遷移
        G[b].push_back(a + N); // 先手番での後退遷移
        deg[a]++; deg[a + N]++;
    }

    // 二分探索
    int low = 0, high = 1000000007; // low: 絶対先手勝つ、high: 絶対先手負ける
    while (high - low > 1) {
        int mid = (low + high) / 2;
        if (!judge(mid)) high = mid;
        else low = mid;
    }
    cout << low << endl;
}