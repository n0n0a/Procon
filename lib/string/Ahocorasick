template <size_t X> struct Trie {
    struct Node {
        char c;
        array<int, X> nxt;
        vector<int> idxs;
        int idx;
        Node(char c) : c(c), idx(-1) { fill(nxt.begin(), nxt.end(), -1); }
    };

    using F = function<int(char)>;
    vector<Node> vs;
    F conv;

    Trie(F conv, char c = '$') : conv(conv) { vs.emplace_back(c); }

    inline int &next(int i, int j) { return vs[i].nxt[j]; }

    void add(const string &s, int x) {
        int pos = 0;
        for(int i = 0; i < (int)s.size(); i++) {
            int k = conv(s[i]);
            if(~next(pos, k)) {
                pos = next(pos, k);
                continue;
            }
            int npos = vs.size();
            next(pos, k) = npos;
            vs.emplace_back(s[i]);
            pos = npos;
        }
        vs[pos].idx = x;
        vs[pos].idxs.emplace_back(x);
    }

    //文字列丸ごと検索
    int find(const string &s) {
        int pos = 0;
        for(int i = 0; i < (int)s.size(); i++) {
            int k = conv(s[i]);
            if(next(pos, k) < 0) return -1;
            pos = next(pos, k);
        }
        return idx(pos);
    }

    //頂点移動
    int move(int pos, char c) {
        assert(pos < (int)vs.size());
        return pos < 0 ? -1 : next(pos, conv(c));
    }

    //子供の数
    int size() { return vs.size(); }

    int idx(int pos) { return pos < 0 ? -1 : vs[pos].idx; }

    //対応するパターンのindex
    vector<int> idxs(int pos) { return pos < 0 ? vector<int>() : vs[pos].idxs; }
};

template <size_t X> struct AhoCorasick : Trie<X + 1> {
    using TRIE = Trie<X + 1>;
    using TRIE::next;
    using TRIE::TRIE;
    vector<int> cnt;

    void build(int heavy = true) {
        auto &vs = TRIE::vs;
        int n = vs.size();
        cnt.resize(n);
        for(int i = 0; i < n; i++) {
            if(heavy) sort(vs[i].idxs.begin(), vs[i].idxs.end());
            cnt[i] = vs[i].idxs.size();
        }

        queue<int> que;
        for(int i = 0; i < (int)X; i++) {
            if(~next(0, i)) {
                next(next(0, i), X) = 0;
                que.emplace(next(0, i));
            } else {
                next(0, i) = 0;
            }
        }

        while(!que.empty()) {
            auto &x = vs[que.front()];
            int fail = x.nxt[X];

            cnt[que.front()] += cnt[fail];
            que.pop();

            for(int i = 0; i < (int)X; i++) {
                int &nx = x.nxt[i];
                if(nx < 0) {
                    nx = next(fail, i);
                    continue;
                }
                que.emplace(nx);
                next(nx, X) = next(fail, i);
                if(heavy) {
                    auto &idx = vs[nx].idxs;
                    auto &idy = vs[next(fail, i)].idxs;
                    vector<int> idz;
                    set_union(idx.begin(), idx.end(), idy.begin(), idy.end(), back_inserter(idz));
                    idx = idz;
                }
            }
        }
    }

    vector<int> match(string s, int heavy = true) {
        auto &vs = TRIE::vs;
        vector<int> res(heavy ? TRIE::size() : 1);
        int pos = 0;
        for(auto &c : s) {
            pos = next(pos, TRIE::conv(c));
            if(heavy)
                for(auto &x : vs[pos].idxs) res[x]++;
            else
                res[0] += cnt[pos];
        }
        return res;
    }

    int count(int pos) { return cnt[pos]; }
};

auto f = [](char c) { return c - 'A'; };
AhoCorasick<26> aho(f);