//trans N
struct KMP {
    string pat;
    vector<int> fail;

    // construct
    KMP(const string &p) { init(p); }
    void init(const string &p) {
        pat = p;
        int m = (int)pat.size();
        fail.assign(m+1, -1);
        for (int i = 0, j = -1; i < m; ++i) {
            while (j >= 0 && pat[i] != pat[j]) j = fail[j];
            fail[i+1] = ++j;
        }
    }

    // the period of S[0:i)
    int period(int i) { return i - fail[i]; }
    
    // the index i such that S[i:] has the exact prefix p
    vector<int> match(const string &S) {
        int n = (int)S.size(), m = (int)pat.size();
        vector<int> res;
        for (int i = 0, k = 0; i < n; ++i) {
            while (k >= 0 && S[i] != pat[k]) k = fail[k];
            ++k;
            if (k == m) res.push_back(i-m+1);
        }
        return res;
    }
};

// trans logN : pattern-matching only
struct KMP {
    string pat;
    vector<int> fail;

    // construct
    KMP(const string &p) { init(p); }
    void init(const string &p) {
        pat = p;
        int m = (int)pat.size();
        fail.assign(m + 1, -1);
        for(int i = 0, j = -1; i < m; ++i) {
            while(j >= 0 && pat[i] != pat[j]) j = fail[j];
            ++j;
            if(pat[i + 1] == pat[j])
                fail[i + 1] = fail[j];
            else
                fail[i + 1] = j;
        }
    }

    // the period of S[0:i)
    int period(int i) { return i - fail[i]; }

    // the index i such that S[i:] has the exact prefix p
    // S is the pattern
    vector<int> match(const string &S) {
        int n = (int)S.size(), m = (int)pat.size();
        vector<int> res;
        for(int i = 0, k = 0; i < n; ++i) {
            while(k >= 0 && S[i] != pat[k]) k = fail[k];
            ++k;
            if(k == m) res.push_back(i - m + 1);
        }
        return res;
    }
};

class KMP {
  private:
    int len;

    /// @details pat 検索したいパターン
    VL pat;

    // table to use kmp
    vector<int> table;

  public:
    /// @param _pat 検索したいパターン
    KMP(const VL _pat) {
        len = _pat.size();
        pat = _pat;
        table = vector<int>(len + 1);
        make_table();
    }

    /// @details S[0, i)の文字列の 接頭辞と接尾辞の最大の共通の長さ(min(i-1))
    void make_table() {
        table[0] = -1;
        int j = -1;
        for(int i = 0; i < len; i++) {
            while(j >= 0 && pat[i] != pat[j]) j = table[j];
            table[i + 1] = ++j;
        }
    }

    /// @param S patが含まれる文字列
    /// @details pstがSに含まれる位置のvectorを返す
    vector<int> match(const VL &S) {
        vector<int> ret;
        int m = 0, i = 0, n = S.size();
        while(m + i < n) {
            if(pat[i] == S[m + i]) {
                if(++i == len) {
                    ret.push_back(m);
                    m = m + i - table[i];
                    i = table[i];
                }
            } else {
                m = m + i - table[i];
                if(i > 0) i = table[i];
            }
        }
        return ret;
    }

    /// @param S patが含まれる文字列
    /// @details pstがSに含まれる最初の位置を返す -1は含まれない
    int contain(const VL &S) {
        int m = 0, i = 0, n = S.size();
        while(m + i < n) {
            if(pat[i] == S[m + i]) {
                if(++i == len) {
                    return m;
                }
            } else {
                m = m + i - table[i];
                if(i > 0) i = table[i];
            }
        }
        return -1;
    }

    void show_table() {
        printf("i:");
        for(int i = 0; i <= len; i++) printf("%3d ", i);
        printf("\n");
        printf("R:");
        for(int i = 0; i <= len; i++) printf("%3d ", table[i]);
        printf("\n");
    }
};