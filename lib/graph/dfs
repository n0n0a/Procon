int dfs(int cur, int a, int b, int c) {
    if(cur == N) {
        if(min({a, b, c}) > 0)
            return abs(A - a) + abs(B - b) + abs(C - c) - 30;
        else
            return INF;
    }
    int a1 = dfs(cur + 1, a, b, c);
    int a2 = dfs(cur + 1, a + l[cur], b, c) + 10;
    int a3 = dfs(cur + 1, a, b + l[cur], c) + 10;
    int a4 = dfs(cur + 1, a, b, c + l[cur]) + 10;
    return min({a1, a2, a3, a4});
}

// find roop
const ll NMAX = 100001;
VVL G(NMAX);
VL hist;
bool used[NMAX], finished[NMAX];
ll start = -1;

void findroop(int v, int par) {
    used[v] = true;
    hist.emplace_back(v);
    FOREACH(to, G[v]) {
        if(to == par) continue;
        if(finished[to]) continue;
        if(used[to]) {
            start = to;
            return;
        }
        findroop(to, v);
        if(start != -1) return;
    }
    hist.pop_back();
    finished[v] = true;
}

VL used(N), hist;
ll start = -1;
auto dfs = fix([&](auto f, ll now) -> void {
    used[now] = 2;
    hist.emplace_back(now);
    FOREACH(to, G[now]) {
        if(used[to] == 2) {
            start = to;
        } else if(used[to] == 0) {
            f(f, to);
        }
        if(~start) return;
    }
    hist.pop_back();
    used[now] = 1;
});

//二部グラフ判定
ll color[NMAX];
VVL G;

bool bpdfs(ll v, ll c) {
    color[v] = c;
    FOREACH(next, G[v]) {
        if(color[next] == c)
            return false;
        else if(color[next] == 0 && !bpdfs(next, -c))
            return false;
    }
    return true;
}

// false<->true
void dfs(ll depth, ll now, ll cost) {
    if(depth == R) {
        ans = min(cost, ans);
        return;
    }
    REP(i, R) if(!went[i]) {
        went[i] = true;
        if(now == -1)
            dfs(depth + 1, i, 0);
        else
            dfs(depth + 1, i, cost + d[r[now]][r[i]]);
        went[i] = false;
    }
}


//Euler Tour
VL tree[100000];
ll rev[100000],in[100000],out[100000],ptr;

void dfs(ll idx, ll par=-1){
    rev[ptr]=idx;
    in[idx]=ptr++;
    FOREACH(next,tree[idx])if(next!=par)dfs(next,idx);
    out[idx]=ptr;
}

//All tree dp
const int nmax = 100000;
VL G[nmax];
ll dist[nmax], ans[nmax];

void dfs1(ll now, ll par) {
    FOREACH(to, G[now]) {
        if(to == par) continue;
        dfs1(to, now);
        dist[now] = max(dist[now], dist[to] + 1);
    }
}

void dfs2(ll now, ll par, ll d_par) {
    vector<PL> d_now;
    d_now.emplace_back(0, -1);
    FOREACH(to, G[now]) {
        if(to == par)
            d_now.emplace_back(d_par + 1, par);
        else
            d_now.emplace_back(dist[to] + 1, to);
    }
    sort(rAll(d_now));
    ans[now] = d_now[0].fi;
    FOREACH(to, G[now]) {
        if(to == par) continue;
        dfs2(to, now, d_now[d_now[0].se == to].fi);
    }
}
